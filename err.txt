NVIDIA: no NVIDIA devices found
WARNING (theano.sandbox.cuda): CUDA is installed, but device gpu is not available  (error: Unable to get the number of gpus available: unknown error)
train y: [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]
 37.5 50.0
 36.5 49.0
 38.5 51.0
 36.5 49.0
 38.5 51.0
 36.5 49.0
 38.5 51.0
 36.5 49.0
 38.5 51.0
 36.5 49.0

Traceback (most recent call last):
  File "adaptNN.py", line 303, in <module>
    main()
  File "adaptNN.py", line 88, in main
    train_x, prediction, param_cost = net.train_batch(train_data, learning_rate1=1.5, learning_rate2=1.5, mod = modify, batch_size=batch_size)
  File "adaptNN.py", line 283, in train_batch
    train(0)
  File "/usr/local/lib/python2.7/site-packages/Theano-0.8.2-py2.7.egg/theano/compile/function_module.py", line 871, in __call__
    storage_map=getattr(self.fn, 'storage_map', None))
  File "/usr/local/lib/python2.7/site-packages/Theano-0.8.2-py2.7.egg/theano/gof/link.py", line 314, in raise_with_op
    reraise(exc_type, exc_value, exc_trace)
  File "/usr/local/lib/python2.7/site-packages/Theano-0.8.2-py2.7.egg/theano/compile/function_module.py", line 859, in __call__
    outputs = self.fn()
ValueError: Input dimension mis-match. (input[0].shape[1] = 1, input[1].shape[1] = 10)
Apply node that caused the error: Elemwise{sub,no_inplace}(Elemwise{Composite{scalar_sigmoid((i0 + i1))}}[(0, 0)].0, InplaceDimShuffle{x,0}.0)
Toposort index: 76
Inputs types: [TensorType(float64, matrix), TensorType(float64, row)]
Inputs shapes: [(10, 1), (1, 10)]
Inputs strides: [(8, 8), (80, 8)]
Inputs values: ['not shown', 'not shown']
Outputs clients: [[Elemwise{sqr,no_inplace}(Elemwise{sub,no_inplace}.0), Elemwise{Composite{((i0 * i1 * i2 * (i3 - i2)) / i4)}}[(0, 1)](TensorConstant{(1, 1) of 2.0}, Elemwise{sub,no_inplace}.0, Elemwise{Composite{scalar_sigmoid((i0 + i1))}}[(0, 0)].0, TensorConstant{(1, 1) of 1.0}, Elemwise{mul,no_inplace}.0)]]

Backtrace when the node is created(use Theano flag traceback.limit=N to make it longer):
  File "adaptNN.py", line 303, in <module>
    main()
  File "adaptNN.py", line 88, in main
    train_x, prediction, param_cost = net.train_batch(train_data, learning_rate1=1.5, learning_rate2=1.5, mod = modify, batch_size=batch_size)
  File "adaptNN.py", line 229, in train_batch
    network_cost = self.layers[-1].network_cost(self)
  File "adaptNN.py", line 189, in network_cost
    return T.mean(T.pow((self.output - net.y), 2))

Debugprint of the apply node: 
Elemwise{sub,no_inplace} [id A] <TensorType(float64, matrix)> ''   
 |Elemwise{Composite{scalar_sigmoid((i0 + i1))}}[(0, 0)] [id B] <TensorType(float64, matrix)> ''   
 | |Dot22 [id C] <TensorType(float64, matrix)> ''   
 | | |Elemwise{Composite{scalar_sigmoid((i0 + i1))}}[(0, 0)] [id D] <TensorType(float64, matrix)> ''   
 | | | |Dot22 [id E] <TensorType(float64, matrix)> ''   
 | | | | |Elemwise{Composite{scalar_sigmoid((i0 + i1))}}[(0, 0)] [id F] <TensorType(float64, matrix)> ''   
 | | | | | |Dot22 [id G] <TensorType(float64, matrix)> ''   
 | | | | | | |Elemwise{Composite{scalar_sigmoid((i0 + i1))}}[(0, 0)] [id H] <TensorType(float64, matrix)> ''   
 | | | | | | | |Dot22 [id I] <TensorType(float64, matrix)> ''   
 | | | | | | | | |Elemwise{Composite{scalar_sigmoid((i0 + i1))}}[(0, 0)] [id J] <TensorType(float64, matrix)> ''   
 | | | | | | | | | |Dot22 [id K] <TensorType(float64, matrix)> ''   
 | | | | | | | | | | |Elemwise{Composite{scalar_sigmoid((i0 + i1))}}[(0, 0)] [id L] <TensorType(float64, matrix)> ''   
 | | | | | | | | | | | |Dot22 [id M] <TensorType(float64, matrix)> ''   
 | | | | | | | | | | | | |Elemwise{Composite{scalar_sigmoid((i0 + i1))}}[(0, 0)] [id N] <TensorType(float64, matrix)> ''   
 | | | | | | | | | | | | | |Dot22 [id O] <TensorType(float64, matrix)> ''   
 | | | | | | | | | | | | | | |Elemwise{Composite{scalar_sigmoid((i0 + i1))}}[(0, 0)] [id P] <TensorType(float64, matrix)> ''   
 | | | | | | | | | | | | | | | |Dot22 [id Q] <TensorType(float64, matrix)> ''   
 | | | | | | | | | | | | | | | | |Elemwise{Composite{scalar_sigmoid((i0 + i1))}}[(0, 0)] [id R] <TensorType(float64, matrix)> ''   
 | | | | | | | | | | | | | | | | | |Dot22 [id S] <TensorType(float64, matrix)> ''   
 | | | | | | | | | | | | | | | | | | |Elemwise{Composite{scalar_sigmoid((i0 + i1))}}[(0, 0)] [id T] <TensorType(float64, matrix)> ''   
 | | | | | | | | | | | | | | | | | | | |Dot22 [id U] <TensorType(float64, matrix)> ''   
 | | | | | | | | | | | | | | | | | | | | |Elemwise{Composite{scalar_sigmoid((i0 + i1))}}[(0, 0)] [id V] <TensorType(float64, matrix)> ''   
 | | | | | | | | | | | | | | | | | | | | | |Dot22 [id W] <TensorType(float64, matrix)> ''   
 | | | | | | | | | | | | | | | | | | | | | | |Elemwise{Composite{scalar_sigmoid((i0 + i1))}}[(0, 0)] [id X] <TensorType(float64, matrix)> ''   
 | | | | | | | | | | | | | | | | | | | | | | | |Dot22 [id Y] <TensorType(float64, matrix)> ''   
 | | | | | | | | | | | | | | | | | | | | | | | | |Subtensor{int64:int64:} [id Z] <TensorType(float64, matrix)> ''   
 | | | | | | | | | | | | | | | | | | | | | | | | | |<TensorType(float64, matrix)> [id BA] <TensorType(float64, matrix)>
 | | | | | | | | | | | | | | | | | | | | | | | | | |ScalarFromTensor [id BB] <int64> ''   
 | | | | | | | | | | | | | | | | | | | | | | | | | | |Elemwise{mul,no_inplace} [id BC] <TensorType(int64, scalar)> ''   
 | | | | | | | | | | | | | | | | | | | | | | | | | |   |TensorConstant{10} [id BD] <TensorType(int64, scalar)>
 | | | | | | | | | | | | | | | | | | | | | | | | | |   |<TensorType(int64, scalar)> [id BE] <TensorType(int64, scalar)>
 | | | | | | | | | | | | | | | | | | | | | | | | | |ScalarFromTensor [id BF] <int64> ''   
 | | | | | | | | | | | | | | | | | | | | | | | | |   |Elemwise{Composite{(i0 * (i1 + i2))}} [id BG] <TensorType(int64, scalar)> ''   
 | | | | | | | | | | | | | | | | | | | | | | | | |     |TensorConstant{10} [id BD] <TensorType(int64, scalar)>
 | | | | | | | | | | | | | | | | | | | | | | | | |     |TensorConstant{1} [id BH] <TensorType(int64, scalar)>
 | | | | | | | | | | | | | | | | | | | | | | | | |     |<TensorType(int64, scalar)> [id BE] <TensorType(int64, scalar)>
 | | | | | | | | | | | | | | | | | | | | | | | | |W [id BI] <TensorType(float64, matrix)>
 | | | | | | | | | | | | | | | | | | | | | | | |InplaceDimShuffle{x,0} [id BJ] <TensorType(float64, row)> ''   
 | | | | | | | | | | | | | | | | | | | | | | |   |b [id BK] <TensorType(float64, vector)>
 | | | | | | | | | | | | | | | | | | | | | | |W [id BL] <TensorType(float64, matrix)>
 | | | | | | | | | | | | | | | | | | | | | |InplaceDimShuffle{x,0} [id BM] <TensorType(float64, row)> ''   
 | | | | | | | | | | | | | | | | | | | | |   |b [id BN] <TensorType(float64, vector)>
 | | | | | | | | | | | | | | | | | | | | |W [id BO] <TensorType(float64, matrix)>
 | | | | | | | | | | | | | | | | | | | |InplaceDimShuffle{x,0} [id BP] <TensorType(float64, row)> ''   
 | | | | | | | | | | | | | | | | | | |   |b [id BQ] <TensorType(float64, vector)>
 | | | | | | | | | | | | | | | | | | |W [id BR] <TensorType(float64, matrix)>
 | | | | | | | | | | | | | | | | | |InplaceDimShuffle{x,0} [id BS] <TensorType(float64, row)> ''   
 | | | | | | | | | | | | | | | | |   |b [id BT] <TensorType(float64, vector)>
 | | | | | | | | | | | | | | | | |W [id BU] <TensorType(float64, matrix)>
 | | | | | | | | | | | | | | | |InplaceDimShuffle{x,0} [id BV] <TensorType(float64, row)> ''   
 | | | | | | | | | | | | | | |   |b [id BW] <TensorType(float64, vector)>
 | | | | | | | | | | | | | | |W [id BX] <TensorType(float64, matrix)>
 | | | | | | | | | | | | | |InplaceDimShuffle{x,0} [id BY] <TensorType(float64, row)> ''   
 | | | | | | | | | | | | |   |b [id BZ] <TensorType(float64, vector)>
 | | | | | | | | | | | | |W [id CA] <TensorType(float64, matrix)>
 | | | | | | | | | | | |InplaceDimShuffle{x,0} [id CB] <TensorType(float64, row)> ''   
 | | | | | | | | | | |   |b [id CC] <TensorType(float64, vector)>
 | | | | | | | | | | |W [id CD] <TensorType(float64, matrix)>
 | | | | | | | | | |InplaceDimShuffle{x,0} [id CE] <TensorType(float64, row)> ''   
 | | | | | | | | |   |b [id CF] <TensorType(float64, vector)>
 | | | | | | | | |W [id CG] <TensorType(float64, matrix)>
 | | | | | | | |InplaceDimShuffle{x,0} [id CH] <TensorType(float64, row)> ''   
 | | | | | | |   |b [id CI] <TensorType(float64, vector)>
 | | | | | | |W [id CJ] <TensorType(float64, matrix)>
 | | | | | |InplaceDimShuffle{x,0} [id CK] <TensorType(float64, row)> ''   
 | | | | |   |b [id CL] <TensorType(float64, vector)>
 | | | | |W [id CM] <TensorType(float64, matrix)>
 | | | |InplaceDimShuffle{x,0} [id CN] <TensorType(float64, row)> ''   
 | | |   |b [id CO] <TensorType(float64, vector)>
 | | |W [id CP] <TensorType(float64, matrix)>
 | |InplaceDimShuffle{x,0} [id CQ] <TensorType(float64, row)> ''   
 |   |b [id CR] <TensorType(float64, vector)>
 |InplaceDimShuffle{x,0} [id CS] <TensorType(float64, row)> ''   
   |Subtensor{int64:int64:} [id CT] <TensorType(float64, vector)> ''   
     |<TensorType(float64, vector)> [id CU] <TensorType(float64, vector)>
     |ScalarFromTensor [id BB] <int64> ''   
     |ScalarFromTensor [id BF] <int64> ''   

Storage map footprint:
 - Elemwise{Composite{scalar_sigmoid((i0 + i1))}}[(0, 0)].0, Shape: (10, 5), ElemSize: 8 Byte(s), TotalSize: 400 Byte(s)
 - Elemwise{Composite{scalar_sigmoid((i0 + i1))}}[(0, 0)].0, Shape: (10, 5), ElemSize: 8 Byte(s), TotalSize: 400 Byte(s)
 - Elemwise{Composite{scalar_sigmoid((i0 + i1))}}[(0, 0)].0, Shape: (10, 5), ElemSize: 8 Byte(s), TotalSize: 400 Byte(s)
 - Elemwise{Composite{scalar_sigmoid((i0 + i1))}}[(0, 0)].0, Shape: (10, 5), ElemSize: 8 Byte(s), TotalSize: 400 Byte(s)
 - Elemwise{Composite{scalar_sigmoid((i0 + i1))}}[(0, 0)].0, Shape: (10, 5), ElemSize: 8 Byte(s), TotalSize: 400 Byte(s)
 - Elemwise{Composite{scalar_sigmoid((i0 + i1))}}[(0, 0)].0, Shape: (10, 5), ElemSize: 8 Byte(s), TotalSize: 400 Byte(s)
 - Elemwise{Composite{scalar_sigmoid((i0 + i1))}}[(0, 0)].0, Shape: (10, 5), ElemSize: 8 Byte(s), TotalSize: 400 Byte(s)
 - Elemwise{Composite{scalar_sigmoid((i0 + i1))}}[(0, 0)].0, Shape: (10, 5), ElemSize: 8 Byte(s), TotalSize: 400 Byte(s)
 - Elemwise{Composite{scalar_sigmoid((i0 + i1))}}[(0, 0)].0, Shape: (10, 5), ElemSize: 8 Byte(s), TotalSize: 400 Byte(s)
 - Elemwise{Composite{scalar_sigmoid((i0 + i1))}}[(0, 0)].0, Shape: (10, 5), ElemSize: 8 Byte(s), TotalSize: 400 Byte(s)
 - Elemwise{Composite{scalar_sigmoid((i0 + i1))}}[(0, 0)].0, Shape: (10, 5), ElemSize: 8 Byte(s), TotalSize: 400 Byte(s)
 - W, Shared Input, Shape: (5, 5), ElemSize: 8 Byte(s), TotalSize: 200 Byte(s)
 - W, Shared Input, Shape: (5, 5), ElemSize: 8 Byte(s), TotalSize: 200 Byte(s)
 - W, Shared Input, Shape: (5, 5), ElemSize: 8 Byte(s), TotalSize: 200 Byte(s)
 - W, Shared Input, Shape: (5, 5), ElemSize: 8 Byte(s), TotalSize: 200 Byte(s)
 - W, Shared Input, Shape: (5, 5), ElemSize: 8 Byte(s), TotalSize: 200 Byte(s)
 - W, Shared Input, Shape: (5, 5), ElemSize: 8 Byte(s), TotalSize: 200 Byte(s)
 - W, Shared Input, Shape: (5, 5), ElemSize: 8 Byte(s), TotalSize: 200 Byte(s)
 - W, Shared Input, Shape: (5, 5), ElemSize: 8 Byte(s), TotalSize: 200 Byte(s)
 - W, Shared Input, Shape: (5, 5), ElemSize: 8 Byte(s), TotalSize: 200 Byte(s)
 - W, Shared Input, Shape: (5, 5), ElemSize: 8 Byte(s), TotalSize: 200 Byte(s)
 - Subtensor{int64:int64:}.0, Shape: (10, 2), ElemSize: 8 Byte(s), TotalSize: 160 Byte(s)
 - <TensorType(float64, matrix)>, Shared Input, Shape: (10, 2), ElemSize: 8 Byte(s), TotalSize: 160 Byte(s)
 - W, Shared Input, Shape: (2, 5), ElemSize: 8 Byte(s), TotalSize: 80 Byte(s)
 - InplaceDimShuffle{x,0}.0, Shape: (1, 10), ElemSize: 8 Byte(s), TotalSize: 80 Byte(s)
 - Elemwise{Composite{scalar_sigmoid((i0 + i1))}}[(0, 0)].0, Shape: (10, 1), ElemSize: 8 Byte(s), TotalSize: 80 Byte(s)
 - <TensorType(float64, vector)>, Shared Input, Shape: (10,), ElemSize: 8 Byte(s), TotalSize: 80 Byte(s)
 - b, Shared Input, Shape: (5,), ElemSize: 8 Byte(s), TotalSize: 40 Byte(s)
 - W, Shared Input, Shape: (5, 1), ElemSize: 8 Byte(s), TotalSize: 40 Byte(s)
 - b, Shared Input, Shape: (5,), ElemSize: 8 Byte(s), TotalSize: 40 Byte(s)
 - b, Shared Input, Shape: (5,), ElemSize: 8 Byte(s), TotalSize: 40 Byte(s)
 - b, Shared Input, Shape: (5,), ElemSize: 8 Byte(s), TotalSize: 40 Byte(s)
 - b, Shared Input, Shape: (5,), ElemSize: 8 Byte(s), TotalSize: 40 Byte(s)
 - b, Shared Input, Shape: (5,), ElemSize: 8 Byte(s), TotalSize: 40 Byte(s)
 - b, Shared Input, Shape: (5,), ElemSize: 8 Byte(s), TotalSize: 40 Byte(s)
 - b, Shared Input, Shape: (5,), ElemSize: 8 Byte(s), TotalSize: 40 Byte(s)
 - b, Shared Input, Shape: (5,), ElemSize: 8 Byte(s), TotalSize: 40 Byte(s)
 - b, Shared Input, Shape: (5,), ElemSize: 8 Byte(s), TotalSize: 40 Byte(s)
 - b, Shared Input, Shape: (5,), ElemSize: 8 Byte(s), TotalSize: 40 Byte(s)
 - TensorConstant{10}, Shape: (), ElemSize: 8 Byte(s), TotalSize: 8.0 Byte(s)
 - TensorConstant{1.0}, Shape: (), ElemSize: 8 Byte(s), TotalSize: 8.0 Byte(s)
 - Constant{0}, Shape: (), ElemSize: 8 Byte(s), TotalSize: 8.0 Byte(s)
 - Constant{1}, Shape: (), ElemSize: 8 Byte(s), TotalSize: 8.0 Byte(s)
 - TensorConstant{(1, 1) of 1.0}, Shape: (1, 1), ElemSize: 8 Byte(s), TotalSize: 8 Byte(s)
 - b, Shared Input, Shape: (1,), ElemSize: 8 Byte(s), TotalSize: 8 Byte(s)
 - TensorConstant{-1.5}, Shape: (), ElemSize: 8 Byte(s), TotalSize: 8.0 Byte(s)
 - TensorConstant{(1,) of 1.5}, Shape: (1,), ElemSize: 8 Byte(s), TotalSize: 8 Byte(s)
 - TensorConstant{(1, 1) of 2.0}, Shape: (1, 1), ElemSize: 8 Byte(s), TotalSize: 8 Byte(s)
 - <TensorType(int64, scalar)>, Input, Shape: (), ElemSize: 8 Byte(s), TotalSize: 8.0 Byte(s)
 - TensorConstant{1}, Shape: (), ElemSize: 8 Byte(s), TotalSize: 8.0 Byte(s)
 - Elemwise{mul,no_inplace}.0, Shape: (), ElemSize: 8 Byte(s), TotalSize: 8.0 Byte(s)
 - Elemwise{Composite{(i0 * (i1 + i2))}}.0, Shape: (), ElemSize: 8 Byte(s), TotalSize: 8.0 Byte(s)
 - TensorConstant{0}, Shape: (), ElemSize: 1 Byte(s), TotalSize: 1.0 Byte(s)
 - TensorConstant{-1}, Shape: (), ElemSize: 1 Byte(s), TotalSize: 1.0 Byte(s)
 TotalSize: 7466.0 Byte(s) 0.000 GB
 TotalSize inputs: 2890.0 Byte(s) 0.000 GB


